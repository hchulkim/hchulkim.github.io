---
title: "My trial and error with Dockerfile"
description: "This is a post on my trial and error on building Docker image with Dockerfile"
date: "2025-09-13"
toc: false
engine: knitr
categories:
  - software
---

I had a chance to create a replication package for my coding assignment this fall. While doing the assignment, I decided to use this opportunity to actually implement a Dockerfile that will work for most of the platforms (e.g. macOC, Linux, ARM/AMD architecture). This is a post on my trial and error on building Docker image with Dockerfile.

## (`R` specific) Incompatible binary issue with certain packages 

If you have used linux, you would be very familiar with some of the installtion issues with `R` packages. It just take awful long time to install most of the packages in linux. The reasn is simple: unlike Windows or MacOS, lot of the packages do not have pre-compiled binary for linux. This is sort of due to the fact that there are so many different linux distributions. As Windows or MacOS is a popular OS (Ugh...), it is easier to maintain standard binary for them. However, this is not the case of linux. Due to this reason, linux users need to compile the source code of the package and literally create the binary for the package. Since most of the powerful packages require compilation (they use C/C++/Fortran for creating efficient package), it is not a surprise that it takes a long time to install the package. Even worse, sometimes compilation does not work because you do not have the necessary compilers or necessary system libraries. This means you need to pre-install all the necessary dependencies before compiling the package.

Fortunately, this issue was recently solved through the help of `Rstudio (Posit) Public Package Manager`. This is a service that provides fall installtion of binary `R` packages for linux. Nowadays, most of the packages have their binary counterpart for linux. Thus, you can significantly reduce the time to install the package.

The problem however, is that the package manager is not perfect. I am not exactly sure why, but it seems binary might not work for some newer version of linux distribution if they were built from some different version of system libraries. This seems to be case for packages like `sf` and `stringi`. In order to fix this, for some packages you need to manually install them from source code instead of using the package manager.

For me, this was for `sf` and `stringi`. This gave me a lot of headache because I had the binary version recorded in the `renv` package. However, the solution was bit simple. I just need to pre-install the packages before initiating `renv::restore()` in the `Dockerfile` as follows:

```{bash}
#| eval: false

# Install some R packages from source to avoid error
RUN R -q -e "install.packages('stringi', type='source', repos='https://cloud.r-project.org')"
RUN R -q -e "install.packages('sf', type='source', repos='https://cloud.r-project.org')"
```

Since I was bit lazy, I did not set specific version for these packages.[^1] But I am sure you can set it using the `remotes` package.

[^1]: To be fair, I did not have too much issue with having different version of `stringi` and `sf`.

## Multi-platform issue

Going deep into reproducibility is that you need to realize that there are two main CPU architecture: `amd64 (x86_64)` and `aarch64 (arm64)`. The problem is that base Docker images built on certain CPU platform will not work for the other platform. Also, there are cases where different architecture will require different binary to install certain software. That is, some binary built for `amd64` will not work for `aarch64` and vice versa.

Why should we care about this? Well, the reason is simple: both of the architecture are widely used in the world. `amd64` is very common architecture for many types of computers. `aarch64` is also a very common architecture. In fact, you are using `aarch64` architecture if you are using an Apple Silicon Mac. So the big problem is that if you are using a base Docker image built on `amd64`, it may not work for people using MacOS.

## Another multi-placform issue: `tinytex`

## Path setting for `tinytex` and CTAN mirror error







