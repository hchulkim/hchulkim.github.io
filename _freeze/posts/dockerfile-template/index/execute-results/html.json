{
  "hash": "9cbf9d6592501ed5406ec52bcb763490",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Personal Dockerfile for data science\"\ndescription: \"Personal Dockerfile template for my research workflow\"\ndate: \"2025-03-15\"\ntoc: false\ncategories:\n  - lecture\n---\n\n\n\n\nDuring the spring break, I had some time to finalize the Dockerfile template for my research workflow. If you don't know what a Docker is, check it out [here](https://raw.githack.com/uo-ec607/lectures/master/13-docker/13-docker.html#1). TL;DR, it is a light virtual machine that contains all the necessary resources for your empirical analysis. It is as if you are shipping your computer to other people that wants to try out your analysis.\n\nIf you want the exact replication project folder, click [here](https://github.com/hchulkim/replication-template).\n\nThis is final `Dockerfile` (for now):\n\n\n\n\n```{bash}\n\n# Use Rocker image as the base for R\nFROM rocker/r-ver:4.4.0\n\nLABEL maintainer=\"Hyoungchul Kim <hchul.kim96@gmail.com>\"\n\n## Update and install system dependencies\nRUN apt-get update && apt-get install -y \\\n    libcurl4-openssl-dev \\\n    libssl-dev \\\n    libfontconfig1-dev \\\n    libharfbuzz-dev \\\n    libfribidi-dev \\\n    libfreetype6-dev \\\n    libpng-dev \\\n    libtiff5-dev \\\n    libjpeg-dev \\\n    libglpk-dev \\\n    libxml2-dev \\\n    libcairo2-dev \\\n    libgit2-dev \\\n    libpq-dev \\\n    libsasl2-dev \\\n    libsqlite3-dev \\\n    libssh2-1-dev \\\n    libxt-dev \\\n    libgdal-dev \\\n    wget \\\n    curl \\\n    vim \\\n    git\t\n\n## Install Pandoc (Required for RMarkdown, Quarto, etc.)\nRUN /rocker_scripts/install_pandoc.sh\n\n## Install Python & Poetry\nRUN /rocker_scripts/install_python.sh && \\\n    pip3 install --upgrade pip && \\\n    pip3 install poetry\n\n# Ensure Poetry installs dependencies in the system environment\nRUN poetry config virtualenvs.create false\n\n# Copy Poetry files and install dependencies\nCOPY pyproject.toml poetry.lock .\nRUN poetry install --no-interaction --no-root\n\n# Verify installed packages\nRUN python3 -c \"import sys; print(sys.path)\"\nRUN python3 -c \"import pandas; print('Poetry packages installed successfully!')\"\n\n## Install Julia 1.11.3 (to match Manifest.toml)\nENV JULIA_VERSION=1.11.3\nRUN wget -q https://julialang-s3.julialang.org/bin/linux/x64/${JULIA_VERSION%.*}/julia-${JULIA_VERSION}-linux-x86_64.tar.gz && \\\n    tar -xzf julia-${JULIA_VERSION}-linux-x86_64.tar.gz -C /usr/local --strip-components=1 && \\\n    rm julia-${JULIA_VERSION}-linux-x86_64.tar.gz\n\n## Verify Julia installation\nRUN julia --version\n\n## Set Julia environment variables\nENV JULIA_DEPOT_PATH=\"/root/.julia\"\nENV JULIA_PROJECT=\"/project\"\n\n## Set working directory\nWORKDIR /project\n\n## Copy renv.lock file into the folder\nCOPY renv.lock .\n\n# Set environment variables for renv\nENV RENV_VERSION 1.0.7\nENV RENV_PATHS_CACHE /renv/cache\nENV RENV_CONFIG_REPOS_OVERRIDE https://cloud.r-project.org\nENV RENV_CONFIG_AUTOLOADER_ENABLED FALSE\nENV RENV_WATCHDOG_ENABLED FALSE\nRUN echo \"options(renv.consent = TRUE)\" >> .Rprofile\nRUN echo \"options(RETICULATE_MINICONDA_ENABLED = FALSE)\" >> .Rprofile\n\n# Install renv from CRAN (avoiding bootstrapping by specifying version)\nRUN R -e \"install.packages('renv', repos = c(CRAN = 'https://cloud.r-project.org'))\"\nRUN R -e \"renv::consent(provided = TRUE)\"\n\n# Run renv restore to restore the environment\nRUN R -e \"renv::restore(confirm = FALSE)\"\n\n# Install Julia packages and manage dependencies\nCOPY Manifest.toml Project.toml .\nRUN julia -e \"import Pkg; Pkg.update(); Pkg.resolve(); Pkg.instantiate(); Pkg.precompile()\"\n\n# Copy over the rest of the project files\nCOPY . .\n\n# Default command\nCMD [\"bash\"]\n\n\n```\n\n\n\n\nAlthough most of commands are self-explanatory from the comments, here is some additional info on what my Dockerfile does:\n\n1. In my personal Dockerfile, I have added three major programming languages that I use: `R`, `Python`, and `Julia`.\n\n2. I have also added some necessary dependencies and useful programs (e.g. `git`, `vim`) for my analysis.\n\n3. I have also added dependency management software for all of the languages. `renv` for `R`, `poetry` for `Python`, and `Pkg` environment for `Julia`. This allows you to use the exact versions of the packages that you installed in your analysis.\n\n4. For this code to fully work, you would need to setup some files (e.g. `Project.toml`, `Manifest.toml`, etc).\n\n5. Save the above code as `Dockerfile` (no extensions) right inside your project directory.\n\n### Quick terminology\n\n- Dockerfile: \"The sheet music.\" The list of layers and instructions for building a Docker image.\n\n- Image: \"The MP3 file.\" This is the tarball.\n\n- Container: \"Song playing on my phone.\" A container is a running instance of an image.\n\n### Docker workflow\n\n1. Create Dockerfile.\n\n2. Build Docker image using Dockerfile.\n\n\n\n\n```{bash}\n\n# IMPORTANT: You might not need to use sudo command. First try this code without it and only use sudo if it does not work.\nsudo docker build --network=host --tag <PROJECT_NAME>:VERSION . \n```\n\n\n\n\n3. Run Docker image.\n\n\n\n\n```{bash}\n\n# IMPORTANT: You might not need to use sudo command. First try this code without it and only use sudo if it does not work.\nsudo docker run -it --rm <PROJECT_NAME>:VERSION\n```\n\n\n\n\n### Some useful Docker-related commands\n\n\n\n\n```{bash}\n#| echo: true\n#| eval: false \n\n# IMPORTANT: You might not need to use sudo command. First try this code without it and only use sudo if it does not work.\n# check cached docker images\nsudo docker images\n\n# check docker containers that are running\nsudo docker ps\n\n# remove the docker image\nsudo docker rmi <IMAGE_NAME>\n\n# remove all dangling images and caches (do it periodically to save space)\nsudo docker system prune\n```\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}