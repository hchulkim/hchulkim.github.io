{
  "hash": "32b7b9e8eaaa4932ee0da9d8799410ba",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"OverTheWire wargames\"\ndescription: \"Personal solutions for overthewire wargames\"\ndate: \"2025-08-02\"\ntoc: false\nengine: knitr\ncategories:\n  - study\n---\n\nIn this post, I write down my solutions for the [**OverTheWire wargames**](https://overthewire.org/wargames/). \n\n## Bandit\n\n### 0\n\nJust get used to the concept of `ssh`. `ssh` is *secure shell* which allows secured access to the remote machine from the local computer.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nssh bandit0@bandit.labs.overthewire.org -p 2220\n\n# You will be asked to type in the password.\n```\n:::\n\n\n### 0 to 1\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# print out the file\ncat readme\n\nexit\n \nssh bandit1@bandit.labs.overthewire.org -p 2220\n\n# You will be asked to type in the password.\n```\n:::\n\n\n### 1 to 2\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Special character - . Need to specify the full location of the file. \ncat ./-\n\n```\n:::\n\n\n### 2 to 3\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# enclose the filenames using double quote, or use \\ before white space.\n\n```\n:::\n\n\n### 3 to 4\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# list all files using -a argument\nls inhere/ -a\n\n```\n:::\n\n\n### 4 to 5\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# find ASCII text files\n# -exec file {} + executes the file command to get info on the content\nfind inhere -type f -exec file {} + | grep ASCII\n\n```\n:::\n\n\n### 5 to 6\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nfind inhere -type f -size 1033c ! -executable -exec file {} + | grep ASCII\n```\n:::\n\n\n### 6 to 7\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# since we don't know where the file is, we will search from the root directory\nfind / -user bandit7 -group bandit6 -size 33c -type f 2>/dev/null -exec cat {} \\;\n\n```\n:::\n\n\n### 7 to 8\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngrep -w \"millionth\" data.txt\n```\n:::\n\n\n### 8 to 9\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nsort data.txt | uniq -u data.txt\n```\n:::\n\n\n### 9 to 10\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nstrings data.txt | grep \"==\"\n```\n:::\n\n\n### 10 to 11\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncat data.txt | base64 -d\n```\n:::\n\n\n### 11 to 12\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncat data.txt | tr 'A-Za-z' 'N-ZA-Mn-za-m'\n```\n:::\n\n\n### 12 to 13\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nls\nhead data.txt\nmkdir /tmp/random_dir\ncd /tmp/random_dir\ncp ~/data.txt .\nmv data.txt data\nxxd -r data > binary\nfile binary\nmv binary binary.gz\ngunzip binary.gz\nbunzip2 binary\nmv binary.out binary.gz\ngunzip binary.gz\ntar -xf binary\n\n# do similar procedure multiple times\nFO5dwFsc0cbaIiH0h8J2eUks2vdTDwAn\n```\n:::\n\n\n### 13 to 14\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nssh -i sshkey.private -p 2220 bandit14@localhost # This will log you in as user bandit14 and allow you to see the password.\n```\n:::\n\n\n### 14 to 15\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nnetcat localhost 30000\n# Then submit the password of the current level.\n```\n:::\n\n\n### 15 to 16\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nopenssl s_client -connect localhost:30001\n# Then submit the password of the current level.\n```\n:::\n\n\n### 16 to 17\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# I feel this part is bit too complicated and not useful for me. So I just provide the link to someone else's solution\n# https://medium.com/@rushi.padhiyar098/overthewire-bandit-level-16-and-level-17-walkthrough-by-cyph3r-ryx-95c1ccdbb76b\n```\n:::\n\n\n### 17 to 18\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ndiff passwords.new passwords.old\n```\n:::\n\n\n### 18 to 19\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# check shell other than bash\ncat /etc/shells\n\n# use it to login\nssh bandit18@bandit.labs.overthewire.org -p 2220 -t \"/bin/sh\"\n\ncGWpMaKXVwDUNgPAVJbWYuGHVn9zl3j8\n```\n:::\n\n\n### 19 to 20\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n./bandit20-do\n\n./bandit20-do ls /etc/bandit_pass\n\n./bandit20-do cat /etc/bandit_pass/bandit20\n```\n:::\n\n\n### 20 to 21\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# I feel this part is not useful for me. So I just provide the link to someone else's solution\nEeoULMCra2q0dSkYj561DX7s1CpBuOBt \n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}