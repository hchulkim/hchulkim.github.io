{
  "hash": "d5e9a8c4f5b7490d85f0bf13fb4d4e36",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Beware of Bash\"\ndescription: \"Some warnings when using Bash\"\ndate: \"2025-03-21\"\ntoc: false\nengine: knitr\ncategories:\n  - software\n---\n\n\n\nIn this post, I list some important precautions and best practices when working with the Bash shell. Note that this will be updated as I find more of it.\n\n### 1. Word splitting\n\nWhen you enter commands in Bash shell, the shell performs several operations on your commands before finally executing them. Thus, understanding how your original command will be tranformed by the shell is important to avoid any fatal errors. This is especially true for Bash as one of the problem with Bash shell is that it does not easily let you find there is something wrong with your command. So it is very likely that you might be having some fatal error without ever knowing it until the ver end.\n\nOne of these operations is called \"word splitting.\" This is a process where shell splits the results of the expansions (brace expansion, arithmetic expansion, etc) into separate words based on the characters of the IFS variable.[^1]\n\n[^1]: The IFS variable is a string of special characters that works as delimiters between words. The default value of IFS is space, tab, newline.\n\nWhy can this be problematic? Word splitting works almost on every unquoted expansions. So the results of your commands can be problematic if you do not consider this.\n\nStill wondering what would happen? Try this and you will see.\n\n#### Case 1 (not quoting expansion)\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n    name=\"1 2 3 4 5\"\n    mkdir $name\n    ls\n    rmdir 1 2 3 4 5\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1\n2\n3\n4\n5\nindex.qmd\nindex.rmarkdown\n```\n\n\n:::\n:::\n\n\n\nThis created 5 files named \"1\", \"2\", \"3\", \"4\", \"5\".\n\n#### Case 1 (quoting expansion)\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n    name=\"1 2 3 4 5\"\n    mkdir \"$name\"\n    ls\n    rmdir \"1 2 3 4 5\"\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1 2 3 4 5\nindex.qmd\nindex.rmarkdown\n```\n\n\n:::\n:::\n\n\n\nThis created one file named \"1 2 3 4 5\".\n\nHence it is best practice always to quote the expansion.\n\n### 2. Bash is sensitive to space (white character)\n\nIn Bash, space (white character) matters a lot. Use it only when it is necessary.\n\n#### Example 1: Space gives you error[^2]\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n\n# Wrong!\ncar = 7; echo $?\n\n# Correct!\ncar=7; echo $?\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nbash: line 2: car: command not found\n127\n0\n```\n\n\n:::\n:::\n\n\n\n[^2]: You might wonder what 127 and 0 mean in the output. In Bash, every command gives off return code. If it is 0, it means execute code was run without problem. If it has some other values, it means there is something wrong with the command.\n\n#### Example 2: Sometimes though, you need space\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n\n# Wrong!\n[10 -et 10]; echo $?\n\n# Correct!\n[ 10 -et 10 ]; echo $?\n\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nbash: line 2: [10: command not found\n127\nbash: line 5: [: -et: binary operator expected\n2\n```\n\n\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}